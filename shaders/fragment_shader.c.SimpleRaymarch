#version 460 core
layout(location = 0) out vec4 FragColor;

uniform float u_time;
uniform vec2 u_resolution;
uniform vec2 u_mouse;

#define T u_time
#define R u_resolution
#define FC gl_FragCoord
#define M u_mouse

#define MAX_MARCHING_STEPS 255
#define MIN_DIST 0.0
#define MAX_DIST 100.0
#define PRECISION 0.001

float get_dist(vec3 p) {

  float sphere = length(p - vec3(0, 1, 0)) - 1;
  float plane = p.y;

  return min(sphere, plane);
}

float ray_marching(vec3 ro, vec3 rd, float start, float end) {

  float depth = start;

  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {
    vec3 p = ro + rd * depth;
    float sphere = get_dist(p);
    depth += sphere;
    if (depth > MAX_DIST || sphere < PRECISION)
      break;
  }
  return depth;
}

vec3 get_normal(vec3 p) {

  float d = get_dist(p);

  vec2 e = vec2(.01, 0);

  vec3 n =
      d - vec3(get_dist(p - e.xyy), get_dist(p - e.yxy), get_dist(p - e.yyx));

  return normalize(n);
}

float get_light(vec3 p) {
  vec3 lightPos = vec3(0, 5, 6);
  vec3 l = normalize(lightPos - p);

  vec3 n = get_normal(p);

  float dif = dot(n, l);
  return dif;
}

void main() {

  vec2 uv = (FC.xy - .5 * R.xy) / R.y;

  vec3 ro = vec3(0, 2, 5);
  vec3 rd = normalize(vec3(uv, -1));

  float d = ray_marching(ro, rd, MIN_DIST, MAX_DIST);

  vec3 p = ro + rd * d;

  vec3 color = vec3(get_light(p));

  FragColor = vec4(color, 1);
}
