#version 460 core
layout(location = 0) out vec4 FragColor;

uniform float u_time;
uniform vec2 u_resolution;
uniform vec2 u_mouse;

#define T u_time
#define R u_resolution
#define FC gl_FragCoord
#define M u_mouse

#define PI 3.14159265359
#define S(a, b, x) smoothstep(a, b, x)

// A cell size of 1. is equal with a space divizion.
#define CELL_SIZE 1.
// If the uv space is too big the lines will disappear.
// Increase the line size to make them appear.
#define LINE_SIZE 0.005

struct Ray {
  vec3 ro;
  vec3 rd;
};

vec3 draw_grid(vec2 uv) {

  // Draw grid.
  vec3 lines = vec3(0.);
  if (mod(uv.x, CELL_SIZE) < LINE_SIZE)
    lines.g = 1.;
  if (mod(uv.y, CELL_SIZE) < LINE_SIZE)
    lines.g = 1.;

  // Draw axes.
  if (abs(uv.x) < LINE_SIZE)
    lines.r = 1.;
  if (abs(uv.y) < LINE_SIZE)
    lines.b = 1.;

  return lines;
}

float sphere_sdf(vec3 point, vec3 offset, float radius) {

  return length(point - offset) - radius;
}

float draw_scene(vec3 point) {

  float dist = sphere_sdf(point, vec3(0., 0., 1.), .1);

  return dist;
}

#define MAX_DISTANCE 100.
#define MAX_STEPS 50.
#define PRECISION .01

float raymarching(Ray ray) {

  float depth = 0.;
  float distance;

  float i = 0.;
  while (i < MAX_STEPS) {

    vec3 point = ray.ro + depth * ray.rd;

    distance = draw_scene(point);

    depth += distance;

    if (depth > MAX_DISTANCE || depth < PRECISION)
      break;

    i += 1.;
  }

  return depth;
}

vec3 calc_normal(vec3 p) {

  vec2 e = vec2(1.0, -1.0) * 0.005;
  return normalize(e.xyy * draw_scene(p + e.xyy) +
                   e.yyx * draw_scene(p + e.yyx) +
                   e.yxy * draw_scene(p + e.yxy) + e.xxx * draw_scene(p + e.xxx)

  );
}

void main() {

  vec2 uv = (FC.xy - .5 * R.xy) / R.y;

  vec3 color = vec3(0.);

  vec3 ro = vec3(0., 0., -1.);
  vec3 rd = normalize(vec3(uv, 1.));

  Ray ray = Ray(ro, rd);

  float d = raymarching(ray);

  if (d < MAX_DISTANCE) {

    vec3 point = ray.ro + ray.rd * d;
    vec3 point_normal = calc_normal(point);

    vec3 light_position = vec3(0., 1., 0.);
    vec3 light_vector = normalize(light_position - point);

    float difuse_lighting = clamp(dot(light_vector, point_normal), 0., 1.);

    color = vec3(difuse_lighting);
  }

  FragColor = vec4(color, 1.);
}
