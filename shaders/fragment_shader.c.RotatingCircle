#version 460 core

layout(location = 0) out vec4 FragColor;

uniform float u_time;
uniform vec2 u_resolution;
uniform vec2 u_mouse;

#define T u_time
#define R u_resolution
#define FC gl_FragCoord
#define M u_mouse

#define S(a, b, t) smoothstep(a, b, t)

float random(vec2 uv) {

  return fract(sin(dot(uv.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

vec2 rotate(vec2 uv, float value) {
  return mat2(cos(value), sin(value), -sin(value), cos(value)) * uv;
}

vec3 square(vec2 uv, float radius) {

  float x = uv.x;
  float y = uv.y;

  vec2 rot = rotate(vec2(x, y), T);

  float square = max(abs(rot.x), abs(rot.y)) - radius;

  return vec3(step(0., square));
}

vec3 circle(vec2 uv, float radius) {

  float x = uv.x - cos(T) * 0.5;
  float y = uv.y - sin(T) * 0.5;

  float circle = pow(x, 2) + pow(y, 2) - pow(radius, 2);

  return vec3(step(circle, 0.));
}

void main() {

  vec2 uv = FC.xy / R.xy;

  uv -= .5;

  uv.x *= R.x / R.y;

  vec3 color = circle(uv, .1);

  FragColor = vec4(color, 1.);
}
